{"version":3,"sources":["Utils/ApiRequest.js","components/common/TableComponent/index.js","components/BooksEntryFormComponent/index.js","components/common/AccordionTableComponent/index.js","containers/BookLibrary/index.js","components/AppComponent/index.js","index.js"],"names":["getApiResponse","method","url","a","data","headers","axios","async","crossDomain","JSON","stringify","then","response","catch","err","alert","responseData","Table","this","props","tableHeaderConfig","map","key","index","toUpperCase","tableBodyConfig","item","Date","getTime","title","Fragment","price","className","renderTableHeader","renderTableData","Component","BooksEntryForm","mergeArrayOfObjects","original","newdata","selector","forEach","dat","foundIndex","findIndex","ori","splice","push","state","category","edit","categoryData","bookList","e","target","name","indexOf","setState","value","datasetId","dataset","id","inputElem","parseInt","trim","prevState","preventDefault","bookData","parse","localStorage","getItem","existingcat","find","length","newList","newTst","newState","setItem","updateBookCategory","onSubmit","handleFormSubmit","htmlFor","type","onChange","handleFormChange","onClick","addBook","bookId","priceId","placeholder","data-id","React","AccordionTable","editCategory","showBookList","isExpanded","subTableHeader","Object","keys","filter","editBookForm","deleteCategory","colSpan","newBookData","updateBookData","BookLibrary","expandCategory","reqHeaders","tableData","categoryDataConfig","categoryheaderConfig","openBookForm","currData","categoryName","openBookFormModal","App","ReactDOM","render","document","getElementById"],"mappings":"0WAmBeA,EAjBK,sCAAG,WAAMC,EAAQC,GAAd,+BAAAC,EAAA,4DAAmBC,EAAnB,+BAAwB,GAAIC,EAA5B,gCACQC,IAAM,CAC7BC,OAAO,EACPC,aAAa,EACbN,MACAD,SACAI,UACAD,KAAMK,KAAKC,UAAUN,KACtBO,KAAK,SAACC,GACL,OAAOA,EAASR,OACjBS,MAAM,SAACC,GACNC,MAAMD,KAXS,cACbE,EADa,yBAaZA,GAbY,yCAAH,wDCuCLC,E,4LAnCP,OAD0BC,KAAKC,MAA1BC,kBACoBC,IAAI,SAACC,EAAKC,GAChC,OAAO,wBAAID,IAAG,UAAKC,EAAL,YAAcD,IAAQA,EAAIE,mB,wCAK3C,OADwBN,KAAKC,MAAxBM,gBACkBJ,IAAI,SAACK,EAAMH,GAG9B,OAFAG,EAAKJ,IAAL,WAAc,IAAIK,MAAOC,UAAzB,YAAsCL,EAAtC,YAA+CG,EAAKG,OAGjD,kBAAC,IAAMC,SAAP,CAAgBR,IAAG,UAAKI,EAAKG,MAAV,YAAmBH,EAAKK,QACtC,4BACI,4BAAKL,EAAKG,OACV,4BAAKH,EAAKK,a,+BAMrB,IACEC,EAAad,KAAKC,MAAlBa,UAEP,OACI,2BAAOA,UAAWA,GACd,+BACI,4BAAKd,KAAKe,sBAEd,+BACKf,KAAKgB,wB,GAhCNC,a,+OC4ILC,E,YA3IX,WAAYjB,GAAO,IAAD,8BACd,4CAAMA,KA6BVkB,oBAAsB,SAACC,EAAUC,GAA+B,IAAtBC,EAAqB,uDAAV,MAOjD,OANAD,EAAQE,QAAQ,SAAAC,GACZ,IAAMC,EAAaL,EAASM,UAAU,SAAAC,GAAG,OAAIA,EAAIL,KAAcE,EAAIF,KAC/DG,GAAc,EAAGL,EAASQ,OAAOH,EAAY,EAAGD,GAC/CJ,EAASS,KAAKL,KAGhBJ,GAlCP,EAAKU,MAAQ,CACTC,SAAU9B,EAAM+B,KAAO/B,EAAMgC,aAAaF,SAAU,GACpDG,SAAUjC,EAAM+B,KAAO/B,EAAMgC,aAAaC,SAAU,IAL1C,E,8EASDC,GACb,GAAGA,EAAEC,OAAOC,KAAKC,QAAQ,aAAa,EAClCtC,KAAKuC,SAAS,CACVR,SAAUI,EAAEC,OAAOI,YAEtB,CACD,IAAMN,EAAQ,YAAOlC,KAAK8B,MAAMI,UACtBO,EAAaN,EAAEC,OAAOM,QAAzBC,GACUC,EAAaT,EAAEC,OAAzBtB,UAEPoB,EAASO,GAAWG,GAA2B,UAAdA,EAAwBT,EAAEC,OAAOI,OAAQ,GAAuB,KAAlBL,EAAEC,OAAOI,MAAcK,SAASV,EAAEC,OAAOI,MAAM,IAAI,GAAIL,EAAEC,OAAOI,MAAMM,OACrJ9C,KAAKuC,SAAS,CACVL,gB,8BAIJC,GACJnC,KAAKuC,SAAS,SAACQ,GAAD,MAAgB,CAC1Bb,SAAS,GAAD,mBAAMa,EAAUb,UAAhB,CAA0B,CAACvB,MAAO,GAAGE,MAAO,U,uCAY3CsB,GAAG,IAAD,OACfA,EAAEa,iBADa,MAEYhD,KAAK8B,MAA3BC,EAFU,EAEVA,SAAUG,EAFA,EAEAA,SACXe,EAAW1D,KAAK2D,MAAMC,aAAaC,QAAQ,aAC3CC,GAAc,EAalB,GAXAJ,EAASK,KAAK,SAAC9C,GACX,GAAGA,EAAKuB,WAAaA,IAAaG,EAASqB,OAEvC,OADAF,GAAc,GACP,EACL,GAAG7C,EAAKuB,WAAaA,GAAYG,EAASqB,OAAO,CACnD,IAAMC,EAAU,EAAKrC,oBAAoBX,EAAK0B,SAAUA,EAAU,SAClE1B,EAAK0B,SAAL,YAAoBsB,GACpBH,GAAc,MAIlBA,EACA,GAAGnB,EAASqB,OAAS,EAAE,CACnB,IAAIE,EAASzD,KAAKmB,oBAAoB,CAACe,EAAS,IAAKA,EAAU,SACzDwB,E,qVAAQ,IAAO1D,KAAK8B,MAAZ,GAAqB,CAACI,SAASuB,IAE7CR,EAAQ,sBAAOA,GAAa,CAACS,SAE7BT,EAAQ,sBAAOA,GAAa,CAACjD,KAAK8B,QAG1CqB,aAAaQ,QAAQ,WAAYpE,KAAKC,UAAUyD,IAChDjD,KAAKC,MAAM2D,mBAAmBX,K,+BAGxB,IAAD,OACEf,EAAWlC,KAAK8B,MAAhBI,SACP,OACI,yBAAKpB,UAAU,aACX,yBAAKA,UAAU,eACX,0BAAM+C,SAAU,SAAC1B,GAAK,EAAK2B,iBAAiB3B,KAC5C,kCAEI,4BAAQ4B,QAAQ,YAAhB,YACA,2BACIC,KAAK,OACL3B,KAAI,UAAKrC,KAAK8B,MAAMC,SAAhB,aACJY,GAAE,UAAK3C,KAAK8B,MAAMC,SAAhB,aACFS,MAAOxC,KAAK8B,MAAMC,SAClBkC,SAAU,SAAC9B,GAAK,EAAK+B,iBAAiB/B,MAE1C,4BAAQ6B,KAAK,SAASG,QAAS,SAAChC,GAAK,EAAKiC,QAAQjC,KAAlD,iBAGCD,GACG,kCACA,4BAAQ6B,QAAQ,SAAhB,SACA7B,EAAS/B,IAAI,WAAiBE,GAAQ,EAAvBM,MAAuB,EAAhBE,MAAiB,IAC7BwD,EAAM,eAAWhE,GACjBiE,EAAO,gBAAYjE,GACzB,OAEI,yBAAKD,IAAG,qBAAgBC,IACpB,kCACI,4BAAQ0D,QAASM,GAAjB,cACA,2BACAL,KAAK,OACLO,YAAY,aACZlC,KAAMgC,EACNG,UAASnE,EACTsC,GAAI0B,EACJvD,UAAU,QACV0B,MAAQN,EAAS7B,GAAOM,MACxBsD,SAAU,SAAC9B,GAAK,EAAK+B,iBAAiB/B,OAG1C,kCACI,4BAAQ4B,QAASO,GAAjB,cACA,2BACAN,KAAK,OACL3B,KAAMiC,EACNE,UAASnE,EACTsC,GAAI2B,EACJxD,UAAU,QACV0B,MAAON,EAAS7B,GAAOQ,MACvBoD,SAAU,SAAC9B,GAAK,EAAK+B,iBAAiB/B,WAY1D,2BAAO6B,KAAK,SAASxB,MAAM,kB,GArItBiC,IAAMxD,WC6FpByD,E,2MAzFX5C,MAAM,CACF6C,cAAc,EACd1C,aAAc,I,mFAKd,OAD0BjC,KAAKC,MAA1BC,kBACoBC,IAAI,SAACC,EAAKC,GAChC,OAAO,wBAAID,IAAG,UAAKC,EAAL,YAAcD,IAAQA,EAAIE,mB,wCAG7B,IAAD,SACoCN,KAAKC,MAAjDM,EADQ,EACRA,gBAAgBqE,EADR,EACQA,aAAcC,EADtB,EACsBA,WAEnC,OAAOtE,EAAgBJ,IAAI,WAA4BE,GAAW,IAArC0B,EAAoC,EAApCA,SAAUG,EAA0B,EAA1BA,SAAU9B,EAAgB,EAAhBA,IAEzC0E,EAAiB5C,EAASqB,OAAS,GAAKwB,OAAOC,KAAK9C,EAAS,IAQjE,OANA4C,EAAiBA,EAAeG,OAAO,SAACzE,GACpC,GAAW,QAARA,EACC,OAAOA,IAKZ,kBAAC,IAAMI,SAAP,CAAgBR,IAAG,UAAK2B,EAAL,YAAiBG,EAASqB,SACxC,4BACI,4BAAK,uBAAG5C,MAAOoB,EAAUoC,QAAS,SAAChC,GAAKyC,EAAazC,EAAGJ,KAAaA,IACrE,4BAAMG,EAASqB,QACf,4BACI,4BAAQY,QAAS,WAAK,EAAKe,aAAa,CAACnD,WAASG,eAAlD,QACA,4BAAQiC,QAAS,WAAK,EAAKlE,MAAMkF,eAAe/E,KAAhD,YAGNyE,IAAe9C,GACb,4BACOG,EAASqB,OACZ,wBAAI6B,QAAQ,KACR,kBAAC,EAAD,CACAtE,UAAU,YACVZ,kBAAqB4E,EACrBvE,gBAAmB2B,KAIvB,wBAAIkD,QAAQ,KACR,2D,mCAUfnD,GACTjC,KAAKuC,SAAS,CACVoC,cAAc,EACd1C,mB,qCAGOoD,GACXrF,KAAKuC,SAAS,CACVoC,cAAc,IAElB3E,KAAKC,MAAM2D,mBAAmByB,K,+BAEzB,IAAD,OACGvE,EAAad,KAAKC,MAAlBa,UADH,EAEiCd,KAAK8B,MAAnC6C,EAFH,EAEGA,aAAc1C,EAFjB,EAEiBA,aACrB,OACI,kBAAC,IAAMrB,SAAP,KACA,2BAAOE,UAAWA,GACd,+BACI,4BAAKd,KAAKe,sBAEd,+BACKf,KAAKgB,oBAGb2D,GACG,kBAAC,EAAD,CAAgB3C,MAAM,EAAMC,aAAcA,EAAc2B,mBAAoB,SAACyB,GAAe,EAAKC,eAAeD,W,GApFnGpE,aC4FdsE,E,YAzFX,WAAYtF,GAAO,IAAD,8BACd,4CAAMA,KAED6B,MAAQ,CACT0D,eAAe,IAJL,E,wMASRC,EAAa,CACf,eAAgB,oBAEJ,2BACD,M,SACO3G,EADP,MADC,2BAEqC,GAAI2G,G,OACzDC,GADIA,E,QACkBvF,IAAI,SAACK,EAAKH,GAE5B,OADAG,EAAKJ,IAAL,WAAc,IAAIK,MAAOC,UAAzB,YAAsCL,GAC/BG,IAGX2C,aAAaQ,QAAQ,WAAYpE,KAAKC,UAAUkG,IAEhD1F,KAAKuC,SAAS,CACVoD,mBAAoBD,EACpBE,qBAAsB,CAAC,gBAAiB,cAAc,a,6IAI3CP,GACfrF,KAAKuC,SAAS,CACVoD,mBAAmBN,EACnBQ,cAAc,M,qCAKPzF,GAEX,IAAI0F,EAAWvG,KAAK2D,MAAMC,aAAaC,QAAQ,aAE/C0C,EAAWA,EAASb,OAAO,SAACzE,GACxB,GAAGA,EAAKJ,MAAQA,EACZ,OAAOI,IAIf2C,aAAaQ,QAAQ,WAAYpE,KAAKC,UAAUsG,IAChD9F,KAAKuC,SAAS,CACVoD,mBAAoBG,M,mCAKf3D,EAAG4D,GACZ/F,KAAKuC,SAAS,CACViD,eAAgBO,M,0CAKpB/F,KAAKuC,SAAS,CACVsD,cAAc,M,+BAIb,IAAD,SAE4E7F,KAAK8B,MAA9E8D,EAFH,EAEGA,qBAAqBD,EAFxB,EAEwBA,mBAAoBH,EAF5C,EAE4CA,eAAgBK,EAF5D,EAE4DA,aAEhE,OACI,yBAAK/E,UAAU,YACX,4BAAQqD,QAAS,SAAChC,GAAK,EAAK6D,kBAAkB7D,KAA9C,oBACCyD,GAAwBD,GAAsB,kBAAC,EAAD,CAC/C7E,UAAU,kBACVZ,kBAAqBF,KAAK8B,MAAM8D,qBAChCrF,gBAAmBP,KAAK8B,MAAM6D,mBAC9Bf,aAAe,SAACzC,EAAE4D,GAAgB,EAAKnB,aAAazC,EAAG4D,IACvDlB,WAAYW,EACZL,eAAgB,SAAC/E,GAAO,EAAK+E,eAAe/E,IAC5CwD,mBAAqB,SAACyB,GAAe,EAAKzB,mBAAmByB,MAG7DQ,GAAgB,kBAAC,EAAD,CAAgB7D,MAAM,EAAOC,aAAc,GAAG2B,mBAAqB,SAACyB,GAAe,EAAKzB,mBAAmByB,W,GAnFjHpE,a,MCMXgF,MARf,WACE,OACE,yBAAKnF,UAAU,OACb,kBAAC,EAAD,QCFNoF,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.b45b04e9.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst getApiResponse = async(method, url, data='', headers)=>{\r\n    const responseData = await axios({\r\n        async: true,\r\n        crossDomain: true,\r\n        url,\r\n        method,\r\n        headers,\r\n        data: JSON.stringify(data)\r\n    }).then((response) => {\r\n        return response.data;\r\n    }).catch((err) => {\r\n        alert(err);\r\n    });\r\n    return responseData;\r\n}\r\n\r\n\r\nexport default getApiResponse;","import React, { Component } from \"react\";\r\n\r\nclass Table extends Component{\r\n\r\n    renderTableHeader(){\r\n        let {tableHeaderConfig} = this.props;\r\n        return tableHeaderConfig.map((key, index) => {\r\n           return <th key={`${index}-${key}`}>{key.toUpperCase()}</th>\r\n        })\r\n    }\r\n    renderTableData(){\r\n        let {tableBodyConfig} = this.props;\r\n        return tableBodyConfig.map((item, index) => {\r\n            item.key = `${new Date().getTime()}-${index}-${item.title}`;\r\n\r\n            return (\r\n               <React.Fragment key={`${item.title}-${item.price}`}>\r\n                    <tr>\r\n                        <td>{item.title}</td>\r\n                        <td>{item.price}</td>\r\n                    </tr>            \r\n               </React.Fragment>\r\n            )\r\n         })\r\n    }\r\n    render(){\r\n        const {className} = this.props;\r\n\r\n        return (\r\n            <table className={className}>\r\n                <thead>\r\n                    <tr>{this.renderTableHeader()}</tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.renderTableData()}\r\n                </tbody>\r\n            </table>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Table;","import React from \"react\"\r\n\r\nclass BooksEntryForm extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            category: props.edit ? props.categoryData.category :\"\" ,\r\n            bookList: props.edit ? props.categoryData.bookList: []\r\n        }\r\n    }\r\n    \r\n    handleFormChange(e){\r\n        if(e.target.name.indexOf('category')>-1){\r\n            this.setState({\r\n                category: e.target.value\r\n            })\r\n        }else{\r\n            const bookList = [...this.state.bookList];\r\n            const {id:datasetId} = e.target.dataset;\r\n            const {className:inputElem} = e.target;\r\n\r\n            bookList[datasetId][inputElem] = inputElem === 'price' ? e.target.value >=0 && e.target.value !==\"\" ? parseInt(e.target.value,10):'': e.target.value.trim();\r\n            this.setState({\r\n                bookList\r\n            })\r\n        }\r\n    }\r\n    addBook(e){\r\n        this.setState((prevState) => ({\r\n            bookList: [...prevState.bookList, {title: \"\",price: 0}]\r\n        }));\r\n    }\r\n    mergeArrayOfObjects = (original, newdata, selector = 'key') => {\r\n        newdata.forEach(dat => {\r\n            const foundIndex = original.findIndex(ori => ori[selector] === dat[selector]);\r\n            if (foundIndex >= 0) original.splice(foundIndex, 1, dat);\r\n            else original.push(dat);\r\n        });\r\n    \r\n        return original;\r\n    };\r\n    handleFormSubmit(e){\r\n        e.preventDefault();\r\n        let {category, bookList} = this.state;\r\n        let bookData = JSON.parse(localStorage.getItem('BookData'));\r\n        let existingcat = false\r\n\r\n        bookData.find((item)=>{\r\n            if(item.category === category && !bookList.length){\r\n                existingcat = true;\r\n                return true;\r\n            }else if(item.category === category && bookList.length){\r\n                const newList = this.mergeArrayOfObjects(item.bookList, bookList, 'title');\r\n                item.bookList = [...newList];\r\n                existingcat = true;\r\n            }\r\n        });\r\n            \r\n        if(!existingcat){\r\n            if(bookList.length > 0){ \r\n                let newTst = this.mergeArrayOfObjects([bookList[0]], bookList, 'title');\r\n                const newState = {...this.state,...{bookList:newTst}};\r\n                \r\n                bookData = [...bookData, ...[newState]]\r\n            }else {\r\n                bookData = [...bookData, ...[this.state]]\r\n            }\r\n        }\r\n        localStorage.setItem('BookData', JSON.stringify(bookData));\r\n        this.props.updateBookCategory(bookData);\r\n    }\r\n\r\n    render() {\r\n        const {bookList}= this.state;\r\n        return (\r\n            <div className=\"form-wrap\">\r\n                <div className=\"form-scroll\">\r\n                    <form onSubmit={(e)=>{this.handleFormSubmit(e)}} >\r\n                    <fieldset>\r\n                            \r\n                        <legend htmlFor=\"category\">Category</legend>\r\n                        <input \r\n                            type=\"text\" \r\n                            name={`${this.state.category}-category`} \r\n                            id={`${this.state.category}-category`} \r\n                            value={this.state.category} \r\n                            onChange={(e)=>{this.handleFormChange(e)}}\r\n                        />\r\n                        <button type=\"button\" onClick={(e)=>{this.addBook(e)}}>Add new book</button>\r\n                        </fieldset>\r\n                        \r\n                        {bookList && \r\n                            <fieldset>\r\n                            <legend htmlFor=\"books\">Books</legend>{\r\n                            bookList.map(({title, price}, index)=>{\r\n                                const bookId = `book-${index}`;\r\n                                const priceId = `price-${index}`;\r\n                                return (\r\n                                    \r\n                                    <div key={`bookDetail-${index}`}>\r\n                                        <fieldset>\r\n                                            <legend htmlFor={bookId}>Book Title</legend>\r\n                                            <input\r\n                                            type=\"text\"\r\n                                            placeholder=\"Book Title\"\r\n                                            name={bookId}\r\n                                            data-id={index}\r\n                                            id={bookId}\r\n                                            className=\"title\"\r\n                                            value= {bookList[index].title}\r\n                                            onChange={(e)=>{this.handleFormChange(e)}}\r\n                                            />\r\n                                        </fieldset>\r\n                                        <fieldset>\r\n                                            <legend htmlFor={priceId}>Book Price</legend>\r\n                                            <input\r\n                                            type=\"text\"\r\n                                            name={priceId}\r\n                                            data-id={index}\r\n                                            id={priceId}\r\n                                            className=\"price\"\r\n                                            value={bookList[index].price}\r\n                                            onChange={(e)=>{this.handleFormChange(e)}}\r\n                                        />\r\n                                        </fieldset>\r\n                                    </div>\r\n                                \r\n                                )\r\n\r\n                            })\r\n                            }\r\n                            </fieldset>\r\n                        }\r\n                        \r\n                        <input type=\"submit\" value=\"Submit\" /> \r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default BooksEntryForm;","import React, { Component } from \"react\";\r\nimport Table from '../TableComponent';\r\nimport BooksEntryForm from '../../BooksEntryFormComponent';\r\n\r\nclass AccordionTable extends Component{\r\n\r\n    state={\r\n        editCategory: false,\r\n        categoryData: {} \r\n    }\r\n\r\n    renderTableHeader(){\r\n        let {tableHeaderConfig} = this.props;\r\n        return tableHeaderConfig.map((key, index) => {\r\n           return <th key={`${index}-${key}`}>{key.toUpperCase()}</th>\r\n        })\r\n    }\r\n    renderTableData(){\r\n        let {tableBodyConfig,showBookList, isExpanded} = this.props;\r\n        \r\n        return tableBodyConfig.map(({category, bookList, key}, index) => {\r\n            \r\n            let subTableHeader = bookList.length > 0 && Object.keys(bookList[0]);\r\n\r\n            subTableHeader = subTableHeader.filter((item)=>{\r\n                if(item !=='key'){\r\n                    return item;\r\n                }\r\n            })\r\n\r\n            return (\r\n               <React.Fragment key={`${category}-${bookList.length}`}>\r\n                    <tr >\r\n                        <td ><a title={category} onClick={(e)=>{showBookList(e, category)}}>{category}</a></td>\r\n                        <td >{bookList.length}</td>\r\n                        <td>\r\n                            <button onClick={()=>{this.editBookForm({category,bookList})}}>Edit</button> \r\n                            <button onClick={()=>{this.props.deleteCategory(key)}}>Delete</button>\r\n                        </td>\r\n                    </tr>\r\n                    {(isExpanded === category) && \r\n                        <tr>\r\n                            { (bookList.length) ?\r\n                            <td colSpan=\"3\">\r\n                                <Table\r\n                                className=\"sub-table\"\r\n                                tableHeaderConfig = {subTableHeader}\r\n                                tableBodyConfig = {bookList}\r\n                                />\r\n                            </td>\r\n                            :\r\n                            <td colSpan=\"3\">\r\n                                <span>No books available</span>\r\n                            </td>\r\n                            }\r\n                        </tr>\r\n                    }             \r\n               </React.Fragment>\r\n            )\r\n         })\r\n    }\r\n\r\n    editBookForm(categoryData){\r\n        this.setState({\r\n            editCategory: true,\r\n            categoryData\r\n        })\r\n    }\r\n    updateBookData(newBookData){\r\n        this.setState({\r\n            editCategory: false\r\n        });\r\n        this.props.updateBookCategory(newBookData);\r\n    }\r\n    render(){\r\n        const {className} = this.props; \r\n        const {editCategory, categoryData} = this.state;\r\n        return (\r\n            <React.Fragment>\r\n            <table className={className}>\r\n                <thead>\r\n                    <tr>{this.renderTableHeader()}</tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.renderTableData()}\r\n                </tbody>\r\n            </table>\r\n            {editCategory && \r\n                <BooksEntryForm edit={true} categoryData={categoryData} updateBookCategory={(newBookData)=>{this.updateBookData(newBookData)}}/>\r\n            }\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AccordionTable;","import React, {Component} from 'react';\r\nimport getApiResponse from '../../Utils/ApiRequest';\r\nimport AccordionTable from '../../components/common/AccordionTableComponent';\r\nimport BooksEntryForm from '../../components/BooksEntryFormComponent';\r\n\r\n\r\nclass BookLibrary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            expandCategory:''\r\n        }\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const reqHeaders = {\r\n            \"content-type\": \"application/json\"\r\n        };\r\n        const dataUrl = './APIs/bookListData.json';\r\n        const method = 'GET'\r\n        let tableData = await getApiResponse(method, dataUrl,'', reqHeaders);\r\n        tableData = tableData.map((item,index)=>{\r\n            item.key = `${new Date().getTime()}-${index}`;\r\n            return item;\r\n        })\r\n\r\n        localStorage.setItem('BookData', JSON.stringify(tableData))\r\n\r\n        this.setState({\r\n            categoryDataConfig: tableData,\r\n            categoryheaderConfig: [\"Category Name\", \"Total Books\",\"Actions\"]\r\n        });\r\n    }\r\n\r\n    updateBookCategory(newBookData){\r\n        this.setState({\r\n            categoryDataConfig:newBookData,\r\n            openBookForm: false\r\n        })\r\n\r\n    }\r\n\r\n    deleteCategory(key){\r\n        \r\n        let currData = JSON.parse(localStorage.getItem('BookData'));\r\n        \r\n        currData = currData.filter((item)=>{\r\n            if(item.key !== key){\r\n                return item;\r\n            }\r\n        })\r\n\r\n        localStorage.setItem('BookData', JSON.stringify(currData));\r\n        this.setState({\r\n            categoryDataConfig: currData\r\n        });\r\n    }\r\n\r\n    \r\n    showBookList(e, categoryName){\r\n        this.setState({\r\n            expandCategory: categoryName\r\n        })\r\n    }\r\n\r\n    openBookFormModal(){\r\n        this.setState({\r\n            openBookForm: true\r\n        })\r\n    }\r\n\r\n    render(){\r\n\r\n        const {categoryheaderConfig,categoryDataConfig, expandCategory, openBookForm} = this.state;\r\n\r\n        return (\r\n            <div className=\"book-lib\">\r\n                <button onClick={(e)=>{this.openBookFormModal(e)}}>Add New Category</button>\r\n               {(categoryheaderConfig && categoryDataConfig) &&<AccordionTable\r\n                className=\"accordian-table\"\r\n                tableHeaderConfig = {this.state.categoryheaderConfig}\r\n                tableBodyConfig = {this.state.categoryDataConfig}\r\n                showBookList= {(e,categoryName)=>{this.showBookList(e, categoryName)}}\r\n                isExpanded={expandCategory}\r\n                deleteCategory={(key)=>{this.deleteCategory(key)}}\r\n                updateBookCategory= {(newBookData)=>{this.updateBookCategory(newBookData)}}\r\n               />\r\n               }\r\n               {openBookForm && <BooksEntryForm edit={false} categoryData={[]}updateBookCategory= {(newBookData)=>{this.updateBookCategory(newBookData)}}/>}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BookLibrary;","import React from 'react';\nimport BookLibrary from '../../containers/BookLibrary';\nimport './index.css';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <BookLibrary/> \n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/AppComponent';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}